// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2025 13:43:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab4_ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab4_ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg CIN;
reg [1:0] S;
// wires                                               
wire COUT;
wire [3:0] F;
wire [3:0] FAND;
wire [3:0] FNOT;
wire [3:0] FOR;
wire [3:0] FSUM;

// assign statements (if any)                          
Lab4_ALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.CIN(CIN),
	.COUT(COUT),
	.F(F),
	.FAND(FAND),
	.FNOT(FNOT),
	.\FOR (FOR),
	.FSUM(FSUM),
	.S(S)
);
initial 
begin 
#1200000 $finish;
end 

// S[1]
initial
begin
	S[1] = 1'b0;
	S[1] = #200000 1'b1;
	S[1] = #200000 1'b0;
	S[1] = #200000 1'b1;
	S[1] = #200000 1'b0;
	S[1] = #200000 1'b1;
end 

// S[0]
initial
begin
	S[0] = 1'b0;
	S[0] = #100000 1'b1;
	S[0] = #100000 1'b0;
	S[0] = #100000 1'b1;
	S[0] = #100000 1'b0;
	S[0] = #100000 1'b1;
	S[0] = #100000 1'b0;
	S[0] = #100000 1'b1;
	S[0] = #100000 1'b0;
	S[0] = #100000 1'b1;
	S[0] = #100000 1'b0;
	S[0] = #100000 1'b1;
end 

// A[3]
always
begin
	A[3] = 1'b0;
	A[3] = #200000 1'b1;
	#200000;
end 

// A[2]
always
begin
	A[2] = 1'b0;
	A[2] = #100000 1'b1;
	#100000;
end 

// A[1]
always
begin
	A[1] = 1'b0;
	A[1] = #50000 1'b1;
	#50000;
end 

// A[0]
always
begin
	A[0] = 1'b0;
	A[0] = #25000 1'b1;
	#25000;
end 

// B[3]
initial
begin
	B[3] = 1'b1;
	# 25000;
	repeat(2)
	begin
		B[3] = 1'b0;
		B[3] = #200000 1'b1;
		# 200000;
	end
	B[3] = 1'b0;
	B[3] = #200000 1'b1;
end 

// B[2]
initial
begin
	B[2] = 1'b1;
	# 25000;
	repeat(5)
	begin
		B[2] = 1'b0;
		B[2] = #100000 1'b1;
		# 100000;
	end
	B[2] = 1'b0;
	B[2] = #100000 1'b1;
end 

// B[1]
initial
begin
	B[1] = 1'b1;
	# 25000;
	repeat(11)
	begin
		B[1] = 1'b0;
		B[1] = #50000 1'b1;
		# 50000;
	end
	B[1] = 1'b0;
	B[1] = #50000 1'b1;
end 

// B[0]
always
begin
	B[0] = 1'b1;
	B[0] = #25000 1'b0;
	#25000;
end 
endmodule

