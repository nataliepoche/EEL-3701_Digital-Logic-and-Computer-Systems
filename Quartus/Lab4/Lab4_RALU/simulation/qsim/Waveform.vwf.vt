// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2025 13:53:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab4_RALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab4_RALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CIN;
reg CLK;
reg [3:0] INPUT;
reg [1:0] MSA;
reg [1:0] MSB;
reg [2:0] MSC;
// wires                                               
wire [6:0] A;
wire [6:0] B;
wire [6:0] C;
wire COUT;
wire [3:0] MUXA;
wire [3:0] MUXB;
wire [3:0] OUTPUT;
wire [3:0] REGA;
wire [3:0] REGAandB;
wire [3:0] REGALeft;
wire [3:0] REGANOT;
wire [3:0] REGAorB;
wire [3:0] REGARight;
wire [3:0] REGAsumB;
wire [3:0] REGB;

// assign statements (if any)                          
Lab4_RALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.CIN(CIN),
	.CLK(CLK),
	.COUT(COUT),
	.\INPUT (INPUT),
	.MSA(MSA),
	.MSB(MSB),
	.MSC(MSC),
	.MUXA(MUXA),
	.MUXB(MUXB),
	.\OUTPUT (OUTPUT),
	.REGA(REGA),
	.REGAandB(REGAandB),
	.REGALeft(REGALeft),
	.REGANOT(REGANOT),
	.REGAorB(REGAorB),
	.REGARight(REGARight),
	.REGAsumB(REGAsumB),
	.REGB(REGB)
);
initial 
begin 
#1200000 $finish;
end 

// CIN
initial
begin
	CIN = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b0;
	# 125000;
	repeat(2)
	begin
		INPUT[3] = 1'b1;
		INPUT[3] = #200000 1'b0;
		# 200000;
	end
	INPUT[3] = 1'b1;
	INPUT[3] = #200000 1'b0;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
	# 25000;
	repeat(5)
	begin
		INPUT[2] = 1'b1;
		INPUT[2] = #100000 1'b0;
		# 100000;
	end
	INPUT[2] = 1'b1;
	INPUT[2] = #100000 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b1;
	# 25000;
	repeat(11)
	begin
		INPUT[1] = 1'b0;
		INPUT[1] = #50000 1'b1;
		# 50000;
	end
	INPUT[1] = 1'b0;
	INPUT[1] = #50000 1'b1;
end 
// \INPUT [ 0 ]
always
begin
	INPUT[0] = 1'b1;
	INPUT[0] = #25000 1'b0;
	#25000;
end 
// MSA[ 1 ]
initial
begin
	MSA[1] = 1'b0;
	MSA[1] = #200000 1'b1;
	MSA[1] = #200000 1'b0;
	MSA[1] = #200000 1'b1;
	MSA[1] = #200000 1'b0;
	MSA[1] = #200000 1'b1;
end 
// MSA[ 0 ]
initial
begin
	MSA[0] = 1'b0;
	MSA[0] = #100000 1'b1;
	MSA[0] = #100000 1'b0;
	MSA[0] = #100000 1'b1;
	MSA[0] = #100000 1'b0;
	MSA[0] = #100000 1'b1;
	MSA[0] = #100000 1'b0;
	MSA[0] = #100000 1'b1;
	MSA[0] = #100000 1'b0;
	MSA[0] = #100000 1'b1;
	MSA[0] = #100000 1'b0;
	MSA[0] = #100000 1'b1;
end 
// MSB[ 1 ]
initial
begin
	MSB[1] = 1'b1;
	MSB[1] = #200000 1'b0;
	MSB[1] = #200000 1'b1;
	MSB[1] = #200000 1'b0;
	MSB[1] = #200000 1'b1;
	MSB[1] = #200000 1'b0;
end 
// MSB[ 0 ]
initial
begin
	MSB[0] = 1'b1;
	MSB[0] = #100000 1'b0;
	MSB[0] = #100000 1'b1;
	MSB[0] = #100000 1'b0;
	MSB[0] = #100000 1'b1;
	MSB[0] = #100000 1'b0;
	MSB[0] = #100000 1'b1;
	MSB[0] = #100000 1'b0;
	MSB[0] = #100000 1'b1;
	MSB[0] = #100000 1'b0;
	MSB[0] = #100000 1'b1;
	MSB[0] = #100000 1'b0;
end 
// MSC[ 2 ]
initial
begin
	MSC[2] = 1'b0;
	MSC[2] = #400000 1'b1;
	MSC[2] = #400000 1'b0;
end 
// MSC[ 1 ]
initial
begin
	MSC[1] = 1'b0;
	MSC[1] = #200000 1'b1;
	MSC[1] = #200000 1'b0;
	MSC[1] = #200000 1'b1;
	MSC[1] = #200000 1'b0;
	MSC[1] = #200000 1'b1;
end 
// MSC[ 0 ]
initial
begin
	MSC[0] = 1'b0;
	MSC[0] = #100000 1'b1;
	MSC[0] = #100000 1'b0;
	MSC[0] = #100000 1'b1;
	MSC[0] = #100000 1'b0;
	MSC[0] = #100000 1'b1;
	MSC[0] = #100000 1'b0;
	MSC[0] = #100000 1'b1;
	MSC[0] = #100000 1'b0;
	MSC[0] = #100000 1'b1;
	MSC[0] = #100000 1'b0;
	MSC[0] = #100000 1'b1;
end 
endmodule

