// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2025 20:25:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          hw5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hw5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C0;
reg C1;
reg C2;
reg C3;
reg E;
// wires                                               
wire Y;

// assign statements (if any)                          
hw5 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C0(C0),
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.E(E),
	.Y(Y)
);
initial 
begin 
#3200000 $finish;
end 

// A
always
begin
	A = 1'b0;
	A = #1600000 1'b1;
	#1600000;
end 

// B
always
begin
	B = 1'b0;
	B = #800000 1'b1;
	#800000;
end 

// C0
always
begin
	C0 = 1'b0;
	C0 = #400000 1'b1;
	#400000;
end 

// C1
always
begin
	C1 = 1'b0;
	C1 = #200000 1'b1;
	#200000;
end 

// C2
always
begin
	C2 = 1'b0;
	C2 = #100000 1'b1;
	#100000;
end 

// C3
always
begin
	C3 = 1'b0;
	C3 = #50000 1'b1;
	#50000;
end 

// E
always
begin
	E = 1'b0;
	E = #25000 1'b1;
	#25000;
end 
endmodule

